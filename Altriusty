ACC91.1q
from collections import Counter
def one_time_n(arr, N):
    count = Counter(arr)
    unique = [num for num, freq in count.items() if freq == 1]
    unique.sort()
    return unique
N = 1
arr = [2, 1, 3, 2]
result_hashmap = one_time_n(arr, N)
print("Hash Map Approach Output:", *result_hashmap)

ACC91.Q2
def w_break(n, s, dictionary):
    dp = [False] * (len(s) + 1)
    dp[0] = True
    word_breaks = [[] for _ in range(len(s) + 1)]
    for i in range(1, len(s) + 1):
        for j in range(i):
            if dp[j] and s[j:i] in dictionary:
                dp[i] = True
                word_breaks[i] = word_breaks[j] + [s[j:i]]
                break  
if dp[len(s)]:
        return ' '.join(word_breaks[len(s)])
    else:
        return 0
n = 6
s1 = "ilike"
s2 = "ilikesamsung"
dictionary = { "i", "like", "sam", "sung", "samsung", "mobile" }
print(w_break(n, s1, dictionary))  
print(w_break(n, s2, dictionary))  

ACC91.Q3
from collections import deque
def bfs(n, m, num):
    q = deque()
    q.append(num)
    stepping_numbers = []
    while q:
        step_num = q.popleft()
        if n <= step_num <= m:
            stepping_numbers.append(step_num)
        if step_num == 0 or step_num > m:
            continue
        last_digit = step_num % 10
        step_down = step_num * 10 + (last_digit - 1)
        step_up = step_num * 10 + (last_digit + 1)
        if last_digit > 0:
            q.append(step_down)
        if last_digit < 9:
            q.append(step_up)
    return stepping_numbers
def find_stepping_numbers(n, m):
    result = []
    for i in range(10):
        result += bfs(n, m, i)
    return sorted(result)
n, m = map(int, input().split())
stepping_numbers = find_stepping_numbers(n, m)  
print("Stepping Numbers:", ' '.join(map(str, stepping_numbers)))

ACCq4
def min_cost(tickets: str, k: int) -> str:
    stack = [] 
    for digit in tickets:
        while stack and k > 0 and stack[-1] > digit:
            stack.pop()
            k -= 1
        stack.append(digit)
    while k > 0:
        stack.pop()
        k -= 1
    result = ''.join(stack).lstrip('0')
    return result if result else '0'

tickets = input().strip()
k = int(input())
minimized_cost = min_cost(tickets, k)
print(minimized_cost)

Q5
def getMaxToys(prices, money):
    start = 0
    current_sum = 0
    max_length = 0
    
    for end in range(len(prices)):
        current_sum += prices[end]
        
        while current_sum > money:
            current_sum -= prices[start]
            start += 1
        
        max_length = max(max_length, end - start + 1)
    
    return max_length
    n = int(input().strip())
prices = [int(input().strip()) for _ in range(n)]
money = int(input().strip())
print(getMaxToys(prices, money))


New File at / Â· Vacanto/Altruisty
